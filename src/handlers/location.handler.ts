import { Telegraf } from "telegraf";
import { BotContext } from "../types/context";
import { COMMANDS } from "../constants/commands";
import { createLocationKeyboard, mainMenuKeyboard } from "../keyboards";

export function registerLocationHandler(bot: Telegraf<BotContext>) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å"
  bot.hears(COMMANDS.EXPLORE, async (ctx) => {
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    const location = await locationRepository.getLocation(player.location);
    const connectedLocations = await locationRepository.getConnectedLocations(
      player.location
    );

    const message =
      `üó∫ –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏?\n\n` +
      `–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: ${location?.name}\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:\n` +
      connectedLocations
        .map(
          (loc) =>
            `${loc.isSafe ? "üè∞" : "‚ö†Ô∏è"} ${loc.name} - ${loc.description}`
        )
        .join("\n");

    await ctx.reply(
      message,
      createLocationKeyboard(location!, connectedLocations)
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ì–¥–µ —è?"
  bot.hears(COMMANDS.WHERE_AM_I, async (ctx) => {
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    const location = await locationRepository.getLocation(player.location);
    const connectedLocations = await locationRepository.getConnectedLocations(
      player.location
    );

    const locationInfo =
      `üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: ${location?.name}\n\n` +
      `üìù ${location?.description}\n\n` +
      `üö™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:\n` +
      connectedLocations.map((loc) => `- ${loc.name}`).join("\n");

    await ctx.reply(
      locationInfo,
      createLocationKeyboard(location!, connectedLocations)
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥"
  bot.hears(COMMANDS.RETURN_TO_TOWN, async (ctx) => {
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    await playerRepository.updatePlayer(telegramId, { location: "0-0" });
    const townLocation = await locationRepository.getLocation("0-0");

    await ctx.reply(
      `üè∞ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥.\n\n` + `${townLocation?.description}`,
      mainMenuKeyboard
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–æ–∫–∞—Ü–∏—é
  bot.hears(/^[üè∞‚ö†Ô∏è] (.+)$/, async (ctx) => {
    console.log("Movement handler triggered");
    console.log("Full message:", ctx.message.text);
    console.log("Match:", ctx.match);

    const locationName = ctx.match[1];
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    console.log("Trying to move to:", locationName);

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    console.log("Current player location:", player.location);

    const connectedLocations = await locationRepository.getConnectedLocations(
      player.location
    );
    console.log("Connected locations:", connectedLocations);

    const targetLocation = connectedLocations.find(
      (loc) => loc.name === locationName
    );
    console.log("targetLocation:", targetLocation);

    if (!targetLocation) {
      return ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç—É–¥–∞ –ø–æ–ø–∞—Å—Ç—å.");
    }

    await playerRepository.updatePlayer(telegramId, {
      location: targetLocation.id,
    });

    const locationInfo =
      `üö∂‚Äç‚ôÇÔ∏è –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: ${targetLocation.name}\n\n` +
      `üìù ${targetLocation.description}`;

    const newConnectedLocations =
      await locationRepository.getConnectedLocations(targetLocation.id);
    await ctx.reply(
      locationInfo,
      createLocationKeyboard(targetLocation, newConnectedLocations)
    );
  });
}
