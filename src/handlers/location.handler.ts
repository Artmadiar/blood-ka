import { Telegraf } from "telegraf";
import { BotContext } from "../types/context";
import { COMMANDS } from "../constants/commands";
import { createLocationKeyboard, mainMenuKeyboard } from "../keyboards";
import { Location } from "@/types";

export function registerLocationHandler(bot: Telegraf<BotContext>) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å"
  bot.hears(COMMANDS.EXPLORE, async (ctx) => {
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    const location = await locationRepository.getLocation(player.location);
    if (!location) return;

    const connectedLocations = await locationRepository.getConnectedLocations(
      player.location
    );

    await ctx.reply(
      formatLocationDescription(location, connectedLocations),
      createLocationKeyboard(location, connectedLocations)
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ì–¥–µ —è?"
  bot.hears(COMMANDS.WHERE_AM_I, async (ctx) => {
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    const location = await locationRepository.getLocation(player.location);
    const connectedLocations = await locationRepository.getConnectedLocations(
      player.location
    );

    const locationInfo =
      `üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: ${location?.name}\n\n` +
      `üìù ${location?.description}\n\n` +
      `üö™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:\n` +
      connectedLocations.map((loc) => `- ${loc.name}`).join("\n");

    await ctx.reply(
      locationInfo,
      createLocationKeyboard(location!, connectedLocations)
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ callback
  bot.action(new RegExp(`^${COMMANDS.MOVE_TO}(.+)$`), async (ctx) => {
    if (!ctx.callbackQuery.message) {
      return;
    }

    const targetLocationId = ctx.match[1];
    const { id: telegramId } = ctx.from;
    const { playerRepository, locationRepository } = ctx.gameContext;

    const player = await playerRepository.getPlayer(telegramId);
    if (!player) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    const currentLocation = await locationRepository.getLocation(
      player.location
    );
    if (!currentLocation) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ü–µ–ª–µ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
    if (!currentLocation.connectedLocations.includes(targetLocationId)) {
      await ctx.answerCbQuery("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç—É–¥–∞ –ø–æ–ø–∞—Å—Ç—å!");
      return;
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    await playerRepository.updatePlayer(telegramId, {
      location: targetLocationId,
    });
    const newLocation = await locationRepository.getLocation(targetLocationId);
    const newConnectedLocations =
      await locationRepository.getConnectedLocations(targetLocationId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–∫–∞—Ü–∏–∏
    await ctx.editMessageText(
      formatLocationDescription(newLocation!, newConnectedLocations),
      {
        reply_markup: createLocationKeyboard(
          newLocation!,
          newConnectedLocations
        ).reply_markup,
        parse_mode: "HTML",
      }
    );

    await ctx.answerCbQuery(`–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ ${newLocation!.name}`);
  });
}

function formatLocationDescription(
  location: Location,
  connectedLocations: Location[]
): string {
  return `
üìç –õ–æ–∫–∞—Ü–∏—è: ${location.name}

${location.description}

üö™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:
${connectedLocations
  .map((loc) => `${loc.isSafe ? "üè∞" : "‚ö†Ô∏è"} ${loc.name}`)
  .join("\n")}
`;
}
